[versions]
apiresult = "2.1.0"
compose = "1.9.0"
composeDetektPlugin = "1.4.0"
coroutines = "1.10.2"
datetime = "0.7.1"
detekt = "1.23.8"
flowmvi = "3.2.0"
gradleAndroid = "8.13.0"
kmputils = "1.7.0"
kodein = "7.26.1"
kotest = "6.0.3"
kotlin = "2.2.20"
kotlin-browser = "0.5.0"
kotlin-collections = "0.4.0"
kotlin-io = "0.8.0"
kotlinx-atomicfu = "0.29.0"
lifecycle = "2.9.4"
serialization = "1.9.0"
turbine = "1.2.1"
versionCatalogUpdatePlugin = "1.0.0"

[libraries]
android-gradle = { module = "com.android.tools.build:gradle", version.ref = "gradleAndroid" }
apiresult = { module = "pro.respawn.apiresult:core", version.ref = "apiresult" }
detekt-compose = { module = "ru.kode:detekt-rules-compose", version.ref = "composeDetektPlugin" }
detekt-formatting = { module = "io.gitlab.arturbosch.detekt:detekt-formatting", version.ref = "detekt" }
detekt-gradle = { module = "io.gitlab.arturbosch.detekt:detekt-gradle-plugin", version.ref = "detekt" }
detekt-libraries = { module = "io.gitlab.arturbosch.detekt:detekt-rules-libraries", version.ref = "detekt" }
kmputils-common = { module = "pro.respawn.kmmutils:common", version.ref = "kmputils" }
kmputils-compose = { module = "pro.respawn.kmmutils:compose", version.ref = "kmputils" }
kmputils-coroutines = { module = "pro.respawn.kmmutils:coroutines", version.ref = "kmputils" }
kmputils-datetime = { module = "pro.respawn.kmmutils:datetime", version.ref = "kmputils" }
kmputils-inputforms = { module = "pro.respawn.kmmutils:inputforms", version.ref = "kmputils" }
kodein = { module = "org.kodein.di:kodein-di", version.ref = "kodein" }
kodein-android = { module = "org.kodein.di:kodein-di-framework-android-x", version.ref = "kodein" }
kodein-compose = { module = "org.kodein.di:kodein-di-framework-compose", version.ref = "kodein" }
kodein-config = { module = "org.kodein.di:kodein-di-conf", version.ref = "kodein" }
kotlin-atomicfu = { module = "org.jetbrains.kotlinx:atomicfu", version.ref = "kotlinx-atomicfu" }
kotlin-browser = { module = "org.jetbrains.kotlinx:kotlinx-browser", version.ref = "kotlin-browser" }
kotlin-collections = { module = "org.jetbrains.kotlinx:kotlinx-collections-immutable", version.ref = "kotlin-collections" }
kotlin-coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "coroutines" }
kotlin-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
kotlin-coroutines-swing = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-swing", version.ref = "coroutines" }
kotlin-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }
kotlin-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "datetime" }
kotlin-gradle = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
kotlin-io = { module = "org.jetbrains.kotlinx:kotlinx-io-core", version.ref = "kotlin-io" }
kotlin-serialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core", version.ref = "serialization" }
kotlin-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "serialization" }
lifecycle-compose = { module = "org.jetbrains.androidx.lifecycle:lifecycle-runtime-compose", version.ref = "lifecycle" }
lifecycle-runtime = { module = "org.jetbrains.androidx.lifecycle:lifecycle-runtime", version.ref = "lifecycle" }
lifecycle-viewmodel = { module = "org.jetbrains.androidx.lifecycle:lifecycle-viewmodel", version.ref = "lifecycle" }
turbine = { module = "app.cash.turbine:turbine", version.ref = "turbine" }
# Core KMP module
flowmvi-core = { module = "pro.respawn.flowmvi:core", version.ref = "flowmvi" }
# Test DSL
flowmvi-test = { module = "pro.respawn.flowmvi:test", version.ref = "flowmvi" }
# Compose multiplatform
flowmvi-compose = { module = "pro.respawn.flowmvi:compose", version.ref = "flowmvi" }
# Android (common + view-based)
flowmvi-android = { module = "pro.respawn.flowmvi:android", version.ref = "flowmvi" }
# Multiplatform state preservation
flowmvi-savedstate = { module = "pro.respawn.flowmvi:savedstate", version.ref = "flowmvi" }
# Remote debugging client
flowmvi-debugger = { module = "pro.respawn.flowmvi:debugger-plugin", version.ref = "flowmvi" }
# Essenty (Decompose) integration
flowmvi-essenty = { module = "pro.respawn.flowmvi:essenty", version.ref = "flowmvi" }
flowmvi-essenty-compose = { module = "pro.respawn.flowmvi:essenty-compose", version.ref = "flowmvi" }
[bundles]
kmputils = [
    "kmputils-common",
    "kmputils-compose",
    "kmputils-coroutines",
    "kmputils-datetime",
    "kmputils-inputforms",
]
kodein = [
    "kodein",
    "kodein-compose",
    "kodein-config",
]
serialization = [
    "kotlin-serialization",
    "kotlin-serialization-json",
]

[plugins]
android-application = { id = "com.android.application" }
androidLibrary = { id = "com.android.library", version.ref = "gradleAndroid" }
atomicfu = { id = "org.jetbrains.kotlinx.atomicfu", version.ref = "kotlinx-atomicfu" }
compose = { id = "org.jetbrains.compose", version.ref = "compose" }
compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }
kotest = { id = "io.kotest.multiplatform", version.ref = "kotest" }
kotlin-multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
version-catalog-update = { id = "nl.littlerobots.version-catalog-update", version.ref = "versionCatalogUpdatePlugin" }
